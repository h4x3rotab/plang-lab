/********************************************************************************
*
* File: basic.templates
* The template methods' code.
* Programmer: Leonidas Fegaras, UTA
* Date: 12/17/97
*
********************************************************************************/


template<class T>
list<T>* list<T>::cons ( T a ) {
  list<T>* n = new list<T>;
  n->tag = Cons;
  n->hd = a;
  n->tl = this;
  return n;
};

template<class T>
int list<T>::length () {
  int n = 0;
  for(list<T>* r = this; r->consp(); r=r->tl) n++;
  return n;
};

template<class T>
list<T>* list<T>::append ( list<T>* x ) {
  if ( nullp() ) return x;
  else return tl->append(x)->cons(hd);
};

template<class T>
T list<T>::nth ( int n ) {
  list<T>* r = this;
  int i = 1;
  for( ; r->consp() && i<n; i++, r=r->tl) ;
  if (r->consp())
     return r->hd;
};

template<class T>
list<T>* rev ( list<T>* x, list<T>* y ) {
  if ( x->nullp() ) return y;
  else return rev(x->tl,y->cons(x->hd));
};

template<class T>
list<T>* list<T>::reverse () {
  return rev(this,new list<T>);
};

template<class T>
bool list<T>::member ( T item ) {
  for(list<T>* r = this; r->consp(); r=r->tl)
     if (r->hd == item)
	return true;
  return false;
};

template<class T>
ostream& operator<<( ostream& s, list<T> *lst ) {
  if (lst->nullp()) return s << "()";
  s << "(" << lst->hd;
  for( list<T>* r = lst->tl; r->consp(); r = r->tl)
     s << "," << r->hd;
  return s << ")";
};

template<class T>
binding<T>::binding ( string s, T c ) {
  pair p;
  p.name = s;
  p.info = c;
  env = Cons(p,new list<pair>);
};

template<class T>
binding<T>* binding<T>::extend ( string s, T c ) {
  binding<T>* res = new binding<T>();
  pair p;
  p.name = s;
  p.info = c;
  res->env = env->cons(p);
  return res;
};

template<class T>
binding<T>* binding<T>::extend ( binding<T>* r ) {
  binding<T>* res = new binding<T>();
  res->env = env->append(r->env);
  return res;
};

template<class T>
T binding<T>::find ( string n ) {
  for(list<pair>* r = env; r->consp(); r=r->tl)
     if (r->hd.name == n)
        return r->hd.info;
};

template<class T>
Names binding<T>::names () {
  Names s = new list<string>;
  for(list<pair>* r = env; r->consp(); r=r->tl)
     s = s->cons(r->hd.name);
  return s->reverse();
};

template<class T>
bool binding<T>::in ( string n ) {
  for(list<pair>* r = env; r->consp(); r=r->tl)
     if (r->hd.name == n)
        return true;
  return false;
};

template<class T>
ostream& operator<<( ostream& s, binding<T> *lst ) {
  if (lst->env->nullp()) return s << "[]";
  s << "[" << lst->env->hd.name << ":" << lst->env->hd.info;
  for(list<typename binding<T>::pair>* r = lst->env->tl; r->consp(); r = r->tl)
     s << "," << r->hd.name << ":" << r->hd.info;
  return s << "]";
};

